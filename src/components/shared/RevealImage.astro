---
const {
  imageUrl,
  alt = "",
  animationDuration = 1.5,
  id = `reveal-${Math.random().toString(36).slice(2)}`,
  bgColor = "",
} = Astro.props;
---

<div
  id={id}
  class={`${bgColor} flex flex-col justify-center items-center h-fit w-fit relative overflow-hidden rounded-2xl`}
>
  <div
    class="reveal invisible relative w-full h-full overflow-hidden rounded-2xl"
  >
    <img
      class="h-full w-full object-cover origin-left"
      src={imageUrl}
      alt={alt}
    />
  </div>
</div>

<script is:inline define:vars={{ id, animationDuration }}>
  document.addEventListener("astro:page-load", () => {
    gsap.registerPlugin(ScrollTrigger);

    // Kill any existing animations for this element
    if (ScrollTrigger.getAll().length > 0) {
      ScrollTrigger.getAll().forEach((trigger) => {
        if (trigger.vars.trigger && trigger.vars.trigger.closest(`#${id}`)) {
          trigger.kill();
        }
      });
    }

    // Use the provided unique id to scope the query
    const container = document.getElementById(id);
    if (container) {
      const reveal = container.querySelector(".reveal");
      if (reveal) {
        const image = reveal.querySelector("img");

        // Reset the styles
        gsap.set(reveal, { autoAlpha: 0, xPercent: 0 });
        gsap.set(image, { xPercent: 0, scale: 1 });

        const tl = gsap.timeline({
          scrollTrigger: {
            trigger: reveal,
            start: "top 80%",
            toggleActions: "play none none reverse",
            once: true,
          },
        });

        tl.set(reveal, { autoAlpha: 1 });
        tl.from(reveal, {
          duration: animationDuration,
          xPercent: -100,
          ease: "power2.out",
        });
        tl.from(image, {
          duration: animationDuration,
          xPercent: 100,
          scale: 1.3,
          delay: -animationDuration,
          ease: "power2.out",
        });
      }
    }
  });
</script>
